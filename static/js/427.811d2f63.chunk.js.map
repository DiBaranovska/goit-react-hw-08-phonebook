{"version":3,"file":"static/js/427.811d2f63.chunk.js","mappings":"oPAwFA,UA/Ec,WACZ,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAaD,EAAAA,EAAAA,MAEbE,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACxB,OAAQA,EAAMC,OAAOC,MACnB,IAAK,QACHX,EAASS,EAAMC,OAAOE,OACtB,MACF,IAAK,WACHV,EAAYO,EAAMC,OAAOE,OACzB,MACF,QACE,OAEL,EAmBKC,EAAQ,WACZb,EAAS,IACTE,EAAY,GACb,EAED,OACE,kBAAMY,SAvBW,SAAAL,GACjBA,EAAMM,iBACN,IAAMC,EAAO,CACXjB,MAAOU,EAAMC,OAAOX,MAAMa,MAC1BX,SAAUQ,EAAMC,OAAOT,SAASW,OAElCN,GAASW,EAAAA,EAAAA,IAAWD,IACjBE,SACAC,MAAK,WACJC,EAAAA,GAAAA,QAAc,yBACdP,GACD,IACAQ,OAAM,WACLD,EAAAA,GAAAA,MAAY,gCACb,GACJ,EAQ6BE,UAAWC,EAAAA,EAAAA,aAAvC,WACE,SAAC,IAAD,CACED,UAAWC,EAAAA,EAAAA,cACXZ,KAAK,QACLa,KAAK,QACLC,GAAItB,EACJ,mBAAiB,YACjBuB,SAAUlB,EACVmB,MAAM,gBACNf,MAAOb,KAGT,SAAC,IAAD,CACEuB,UAAWC,EAAAA,EAAAA,cACXZ,KAAK,WACLa,KAAK,WACLC,GAAIpB,EACJuB,UAAU,IACVF,SAAUlB,EACVmB,MAAM,WACNf,MAAOX,KAET,SAAC,IAAD,CACEqB,UAAWC,EAAAA,EAAAA,eACXM,QAAQ,YACRL,KAAK,SACLM,UAAW/B,IAAUE,EAJvB,SAKC,YAKN,C,qBCrFD,KAAgB,aAAe,+BAA+B,cAAgB,gCAAgC,eAAiB,iC,wDCA/H,IAkBIG,EAAS,WAGX,IAH0B,IAAd2B,EAAc,uDAAP,GACfN,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfN,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOX,CACR,C","sources":["pages/Login/Login.jsx","webpack://react-homework-template/./src/pages/Register/Register.module.css?12fc","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { loginThunk } from '../../redux/user/thunk';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport css from '../Register/Register.module.css';\n\nconst Login = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const mailLoginID = nanoid();\n  const pasLoginID = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    switch (event.target.name) {\n      case 'email':\n        setEmail(event.target.value);\n        break;\n      case 'password':\n        setPassword(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const formSubmit = event => {\n    event.preventDefault();\n    const data = {\n      email: event.target.email.value,\n      password: event.target.password.value,\n    };\n    dispatch(loginThunk(data))\n      .unwrap()\n      .then(() => {\n        toast.success('Log In successfully!!');\n        reset();\n      })\n      .catch(() => {\n        toast.error('Error, check the entered data');\n      });\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form onSubmit={formSubmit} className={css.registr_form}>\n      <TextField\n        className={css.registr_input}\n        name=\"email\"\n        type=\"email\"\n        id={mailLoginID}\n        aria-describedby=\"emailHelp\"\n        onChange={handleInputChange}\n        label=\"Email address\"\n        value={email}\n      />\n\n      <TextField\n        className={css.registr_input}\n        name=\"password\"\n        type=\"password\"\n        id={pasLoginID}\n        minLength=\"7\"\n        onChange={handleInputChange}\n        label=\"Password\"\n        value={password}\n      />\n      <Button\n        className={css.registr_button}\n        variant=\"contained\"\n        type=\"submit\"\n        disabled={!email || !password}\n      >\n        Login\n      </Button>\n    </form>\n  );\n};\n\nexport default Login;\n","// extracted by mini-css-extract-plugin\nexport default {\"registr_form\":\"Register_registr_form__U5IgB\",\"registr_input\":\"Register_registr_input__E9S9M\",\"registr_button\":\"Register_registr_button__aHK3s\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","email","setEmail","password","setPassword","mailLoginID","nanoid","pasLoginID","dispatch","useDispatch","handleInputChange","event","target","name","value","reset","onSubmit","preventDefault","data","loginThunk","unwrap","then","toast","catch","className","css","type","id","onChange","label","minLength","variant","disabled","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}